name: "Terraform: Manual Workflow"
on:
  workflow_dispatch:
    inputs:
      apply:
        description: "Apply the changes"
        required: true
        type: boolean
      use_case:
        description: "Use case"
        type: choice
        required: true
        options:
          - boo
          - foo
          - haus
          - target
          - testit
          - x
      environment:
        description: "Name of the environment"
        type: choice
        required: true
        options:
          - poc
          - dev
          - uat
          - prd
#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
jobs:
  terraform:
    name: "Terraform"
    runs-on: [self-hosted, Linux]
    environment: ${{ inputs.environment }}
    concurrency:
      group: "${{ inputs.use_case }}/${{ inputs.environment }}"
    env:
      TF_PATH: usecases/${{ inputs.use_case }}/${{ inputs.environment }}
      TF_STATEFILE: ${{ inputs.use_case }}${{ inputs.environment }}.tfstate
      ARM_CLIENT_ID: ${{vars.ARM_CLIENT_ID}}
      ARM_SUBSCRIPTION_ID: ${{vars.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{vars.ARM_TENANT_ID}}
      TF_VAR_ARM_CLIENT_ID: ${{vars.ARM_CLIENT_ID}}
      TF_VAR_ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.5"
          terraform_wrapper: false
      - name: Insert PAT into Terraform files
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["usecases/${{ inputs.use_case }}/*/*.tf", "modules/*/*.tf"]'
          tokenPrefix: "__"
          tokenSuffix: "__"
        env:
          AZDO_PAT_TOKEN: ${{ secrets.GOLDEN_TEMPLATES_PAT }}
          GH_PAT_TOKEN: ${{ secrets.GIT_TEMPLATES_PAT }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform -chdir=${{env.TF_PATH}} init \
              -upgrade \
              -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP }}" \
              -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT }}" \
              -backend-config="container_name=${{ vars.CONTAINER_NAME }}" \
              -backend-config="key=${{ env.TF_STATEFILE }}"
      - name: Terraform Plan
        run: |
          terraform -chdir=${{env.TF_PATH}} plan \
            -input=false \
            -out=terraform.tfplan
      - name: Terraform Apply
        if: ${{ inputs.apply }}
        run: |
          terraform -chdir=${{env.TF_PATH}} apply -auto-approve "terraform.tfplan"
